<?xml version='1.0' encoding='UTF-8'?>
<!--
  DS Changed (target) namespace from http:// to https://
-->
<xsd:schema elementFormDefault="qualified"
	targetNamespace="https://www.omg.org/spec/SCE/20201109/MODEL/"
    xmlns="https://www.omg.org/spec/SCE/20201109/MODEL/"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:scedi="https://www.omg.org/spec/SCE/20201109/SCEDI/">

	<!-- 
		TODO Converge on Naming Conventions: 
		Option1: Uppercase Element, 't'-based Types
		Option2: camelCase Elements, UpperCase Types
	-->

	<xsd:import namespace="https://www.omg.org/spec/SCE/20201109/SCEDI/"
	            schemaLocation="SCEDI10.xsd">
		<xsd:annotation>
			<xsd:documentation>
			    Include the SCE Diagram Interchange (DI) schema
			</xsd:documentation>
		</xsd:annotation>
	</xsd:import>

    <!-- Not sure if we need this in SCE, but we will in KPMN and probably SDMN -->
	<xsd:complexType name="tSCEElementReference">
		<xsd:attribute name="href" type="xsd:anyURI" use="required"/>
	</xsd:complexType>
	
	<!-- 
		@DS Removed attribute : substitutionGroup="tNamedElement" 
		The element has a type, tDiagramArtifact, that extends tNamedElement
	-->
	<xsd:element name="DiagramArtifact" type="tDiagramArtifact" abstract="true" />
	<xsd:complexType name="tDiagramArtifact">
		<xsd:annotation>
			<xsd:documentation>
			    A DiagramArtifact is a graphical object that provides supporting information about a Diagram. However, it does not have any behavioral semantics.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tNamedElement"/>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 
		@DS Removed attribute : substitutionGroup="tDiagramArtifact" 
		The element has a type, tAssociation, that extends tDiagramArtifact
		
		Added attribute: substitutionGroup="DiagramArtifact"
		Makes Association Elements usable in place of DiagramArtifact Elements
	-->
	<xsd:element name="Association" type="tAssociation" substitutionGroup="DiagramArtifact"/>
	<xsd:complexType name="tAssociation">
		<xsd:annotation>
			<xsd:documentation>
			    An Association is used to associate DiagramArtifacts (often Text Annotations) to other diagram elements. If a DiagramArtifact extension, such as an image, is added to the model, then that new DiagramArtifact can be connected by an Association. A modeler can set the direct of the association such that the connector line will have an arrowhead on either one end or both. The presence of one or two arrowheads does not have any specific semantic meaning but may provide a visual queue about the nature of the association.
		    </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tDiagramArtifact">
				<xsd:sequence>
					<xsd:element maxOccurs="1" minOccurs="1" name="sourceRef" type="tNamedElement">
						<xsd:annotation>
							<xsd:documentation>
							    The NamedElement that the Association is connecting from.
						    </xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element maxOccurs="1" minOccurs="1" name="targetRef" type="tNamedElement">
						<xsd:annotation>
							<xsd:documentation>
							    The NamedElement that the Association is connecting to.
						    </xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="associationDirection" type="tAssociationDirection">
						<xsd:annotation>
							<xsd:documentation>
							    AssociationDirection is an attribute that defines whether or not the Association shows any directionality with an arrowhead. The default is “none” (no arrowhead). A value of “one” means that the arrowhead SHALL be at the Target Object. A value of “both” means that there SHALL be an arrowhead at both ends of the Association line.
						    </xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:simpleType name="tAssociationDirection">
		<xsd:annotation>
			<xsd:documentation>
			    AssociationDirection is an enumerated list that defines the options regarding whether or not an Association shows any directionality with an arrowhead. The default is “none” (no arrowhead). A value of “one” means that the arrowhead SHALL be at the Target Object. A value of “both” means that there SHALL be an arrowhead at both ends of the Association line.
		    </xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="one"/>
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="both"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:element name="Group" type="tGroup"/>
	<xsd:complexType name="tGroup">
		<xsd:annotation>
			<xsd:documentation>
			    The Group object is a DiagramArtifact that provides a visual mechanism to informally group elements of a diagram. Groups are often used to highlight certain sections of a diagram without adding additional constraints or semantics. The highlighted (grouped) section of the diagram can be separated for reporting and analysis purposes.
		    </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tDiagramArtifact"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="TextAnnotation" type="tTextAnnotation"/>
	<xsd:complexType name="tTextAnnotation">
		<xsd:annotation>
			<xsd:documentation>
			    Text Annotations are a mechanism for a modeler to provide additional information for the reader of a SDMN Diagram.
		    </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tDiagramArtifact">
				<xsd:attribute use="required" name="text" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    Text is an attribute that provides text that the modeler wishes to communicate to the reader of the diagram.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="required" name="textFormat" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    This attribute identifies the format of the text. It MUST follow the mime-type format. The default is &quot;text/plain.&quot;
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="BaseElement" type="tBaseElement"/>
	<xsd:complexType abstract="true" name="tBaseElement">
		<xsd:annotation>
			<xsd:documentation>
			    BaseElement is the abstract super class for most SCE elements. Basically, it is the root element of the SCE metamodel. Most of the elements within SCE, and any specification that is dependent on SCE, will inherit the attributes and associations of BaseElement. It provides the attributes id, documentation, and other properties that the other elements will inherit.
		    </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="documentation" type="tDocumentation">
				<xsd:annotation>
					<xsd:documentation>
					    This association is used to annotate any concrete specialization of BaseElement with descriptions and other documentation.
				    </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="extensionDefinition" type="tExtensionDefinition">
				<xsd:annotation>
					<xsd:documentation>
					    This association is used to attach additional attributes and associations to any concrete specialization of BaseElement – i.e., provide an extension. This association is not applicable when the XML schema interchange is used, since the XSD mechanisms for supporting anyAttribute and any element already satisfy this requirement.
				    </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="extensionValue" type="tExtensionAttributeValue">
				<xsd:annotation>
					<xsd:documentation>
					    This association is used to provide values for extended attributes and model associations. This association is not applicable when the XML schema interchange is used, since the XSD mechanisms for supporting anyAttribute and any element already satisfy this requirement.
				    </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="categoryRef" type="tCategory">
				<xsd:annotation>
					<xsd:documentation>
					    This association is used to categorize any concrete specialization of BaseElement. A Category has user-defined semantics, which can be used for documentation or analysis purposes.
				    </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute use="required" name="id" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
				    This attribute is used to uniquely identify a BaseElement. The id is REQUIRED if this element is referenced or intended to be referenced by something else. If the element is not currently referenced and is never intended to be referenced, the id MAY be omitted.
			    </xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:element name="Category" type="tCategory"/>
	<xsd:complexType name="tCategory">
		<xsd:annotation>
			<xsd:documentation>
			    A Category, which have user-defined semantics, can be used for documentation or metadata organizational purposes. For example, recommendations (in the healthcare domain) can be assigned a category of “Lifestyle Modification” with further breakdowns into “Weight Reduction,” “Exercise Program,” and “Diet Modification” sub-categories.
		    </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tNamedElement">
				<xsd:sequence>
					<xsd:element maxOccurs="1" minOccurs="0" name="parent" type="tCategory">
						<xsd:annotation>
							<xsd:documentation>
							    This association allows the nesting of Categories. A Category MAY be a parent for more than one Category.
						    </xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="Documentation" type="tDocumentation"/>
	<xsd:complexType name="tDocumentation">
		<xsd:annotation>
			<xsd:documentation>
			    The Documentation element provides a place for model developers to provide descriptive information about an model element.
		    </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:attribute use="required" name="textFormat" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    This attribute identifies the format of the text. It MUST follow the mime-type format. The default is text/plain.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="required" name="text" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    This attribute is used to capture the text descriptions of any concrete element within a model that is dependent on SCE element.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="Import" type="tImport"/>
	<xsd:complexType name="tImport">
		<xsd:annotation>
			<xsd:documentation>
			    The Import class is used by an implementation of a modeling specification (i.e., a model), dependent on SCE, when referencing an external element that is contained in a different model. The referenced model can be of the same or different type of modeling specification. For example, one SDMN model may import the Data Items from another SDMN model.
		    </xsd:documentation>
		</xsd:annotation>
		<xsd:attribute use="required" name="importType" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
				    Identifies the type of document being imported by providing an absolute URI that identifies the encoding language used in the document. The value of the importType attribute MUST be set to http://www.w3.org/2001/XMLSchema when importing XML Schema 1.0 documents, to http://www.w3.org/TR/wsdl20/ when importing WSDL 2.0 documents, and http://www.omg.org/spec/BPMN/20100524/MODEL when importing BPMN 2.0 documents. Other types of documents MAY be supported. Importing Xml Schema 1.0, WSDL 2.0 and BPMN 2.0, CBMN 1.0, CMMN 1.1, DMN 1.3, and SDMN 1.0 types MUST be supported. Identifies the type of document being imported by providing an absolute URI that identifies the encoding language used in the document. The value of the importType attribute MUST be set to http://www.w3.org/2001/XMLSchema when importing XML Schema 1.0 documents, to http://www.w3.org/TR/wsdl20/ when importing WSDL 2.0 documents, and http://www.omg.org/spec/BPMN/20100524/MODEL when importing BPMN 2.0 documents. Other types of documents MAY be supported. Importing Xml Schema 1.0, WSDL 2.0 and BPMN 2.0, CBMN 1.0, CMMN 1.1, DMN 1.3, and SDMN 1.0 types MUST be supported. 
			    </xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute use="optional" name="location" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Identifies the location of the imported element within the document identified by the importType.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute use="required" name="namespace" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Identifies the namespace of the imported element.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:element name="NamedElement" type="tNamedElement"/>
	<xsd:complexType abstract="true" name="tNamedElement">
		<xsd:annotation>
			<xsd:documentation>
			    NamedElement provides a foundation class for all elements that have names in models based on specifications (e.g., KPMN) that are based on SCE. Any concrete model element (from a model dependent on SCE) that can have a name will inherit from this element – directly or indirectly. Those elements that inherit from NamedElement will be contained within another element that is appropriate to their context.
		    </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<xsd:element maxOccurs="unbounded" minOccurs="0" name="semanticReference" type="tSemanticReference">
						<xsd:annotation>
							<xsd:documentation>A concrete NamedElement can include multiple SemanticReference elements.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute use="optional" name="name" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    The name attribute is a text description or label of the element. In general, the name is optional, but most elements will require a name. The definition of each specialization of NamedElement will identify this requirement. Note: although the name is optional, the element has been named “NamedElement” rather than “NameableElement.”
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="SemanticReference" type="tSemanticReference"/>
	<xsd:complexType name="tSemanticReference">
		<xsd:annotation>
			<xsd:documentation>
			    Most BPM+ models (dependent on SCE) are not intended to define full-scale ontologies or domain models, such as data models. However, the activities, decisions, data items, etc. of BPM+ are representative of elements defined by ontologies or data models. The specific context of the BPM+ elements may result in different terminology or sub-sets of data representation elements within the normative domain models. To reduce any confusion due to terminology or data representation, the BPM+ models dependent on SCE have the capability of linking model elements to the appropriate external sources of truth for their domain. The SemanticReference is that mechanism in SCE.
		      </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:attribute use="required" name="name" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    This attribute allows a name to be added to a SemanticReference. The name does not provide any semantic information about the reference. It is only a descriptive label to aid readers of the model understand the target of the SemanticReference, especially if the conceptURI is not human-readable. However, it is up to the modeler to ensure that the label is an accurate representation of the reference.
This is needed because SemanticReference is not a sub-class of NamedElement since that would create a recursive relationship for SemanticReference (i.e., a SemanticReference could have its own SemanticReference). Thus, SemanticReference is a sub-class of BaseElement.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="required" name="conceptURI" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    This attribute defines the URI location of the target of the SemanticReference.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="optional" name="conceptNamespace" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    This attribute documents the version of the target of the SemanticReference when the SemanticReference was included in the model.
If this information is not provided, then it is likely that the conceptURI will navigate to the current version of the target of the SemanticReference, which could have changed since the SemanticReference was established in the model.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:element name="SpecificationPackage" type="tSpecificationPackage"/>
	<xsd:complexType abstract="true" name="tSpecificationPackage">
		<xsd:annotation>
			<xsd:documentation>
			    This the main SCE package, which contains a set of properties and other elements, that are common to and usable by other modeling specifications. The idea of a “package” is that the package will contain all the elements of a model that is based on that specification. When the content of that model is serialized, the elements will be contained within the package. Some previous BMI specifications have named this packaging element “Definitions.” For example, the BPMN Definitions element is the main package that contains all the Collaborations, Processes, and other elements that make up the BPMN model. The SCE SpecificationPackage element provides the key attributes and associations that most BMI modeling specifications will need as part of their packaging element.
		    </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tNamedElement">
				<xsd:sequence>
					<xsd:element maxOccurs="unbounded" minOccurs="0" name="extension" type="tExtension">
						<xsd:annotation>
							<xsd:documentation>
							    This attribute identifies Extensions beyond the attributes and model associations in a concrete specialization of SpecificationPackage.
						    </xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element maxOccurs="unbounded" minOccurs="0" name="relationship" type="tRelationship">
						<xsd:annotation>
							<xsd:documentation>
							    This is a list of all the Relationships contained within a concrete specialization of SpecificationPackage.
						    </xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element maxOccurs="unbounded" minOccurs="0" name="category" type="tCategory">
						<xsd:annotation>
							<xsd:documentation>
							    This is a list of all the Categories contained within a concrete specialization of SpecificationPackage.
						    </xsd:documentation>
						</xsd:annotation>
					</xsd:element>
	     			<xsd:element maxOccurs="1" minOccurs="0" name="status" type="tModelDevelopmentStatus">
		     			<xsd:annotation>
			     			<xsd:documentation>
			     			    This attribute defines the development status of the model package that is dependent on SCE. A status not listed in the enumeration set can be used (i.e., the enumeration list can be extended).
		     			    </xsd:documentation>
				     	</xsd:annotation>
     			    	</xsd:element>
					<xsd:element maxOccurs="unbounded" minOccurs="0" name="import" type="tImport">
						<xsd:annotation>
							<xsd:documentation>
							    This attribute is used to import externally defined elements and make them available for use by elements within a concrete specialization of SpecificationPackage.
						    </xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute use="required" name="targetNamespace" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    This attribute identifies the namespace associated with a concrete specialization of SpecificationPackage and will follow the convention established by XML Schema.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="optional" name="language" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    This attribute sets the written language used for a concrete specialization of SpecificationPackage and it its contained elements. If this attribute is not set, then the English (US) will be used.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="required" name="exporter" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    This attribute identifies the tool that is exporting the model file that is dependent on SCE.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="required" name="exporterVersion" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    This attribute identifies the version of the tool that is exporting the file that is dependent on SCE.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="optional" name="version" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    This attribute specifies the version of the model package that is dependent on SCE.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="optional" name="versionDate" type="xsd:dateTime">
					<xsd:annotation>
						<xsd:documentation>
						    The date when the version of the model package that is dependent on SCE was established.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="optional" name="copyright" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    This attribute contains the copyright for the listed version of the model package that is dependent on SCE.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="optional" name="creationDate" type="xsd:dateTime">
					<xsd:annotation>
						<xsd:documentation>
						    The date that the model package that is dependent on SCE was started.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="optional" name="approvalDate" type="xsd:dateTime">
					<xsd:annotation>
						<xsd:documentation>
						    The date that the model package that is dependent on SCE was approved.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="optional" name="lastReviewDate" type="xsd:dateTime">
					<xsd:annotation>
						<xsd:documentation>
						    The date that the model package that is dependent on SCE was last reviewed (the review was completed).
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:simpleType name="tModelDevelopmentStatus">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unknown"/>
			<xsd:enumeration value="active"/>
			<xsd:enumeration value="draft"/>
			<xsd:enumeration value="retired"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:element name="Extension" type="tExtension"/>
	<xsd:complexType name="tExtension">
		<xsd:annotation>
			<xsd:documentation>
			    The Extension element binds/imports an ExtensionDefinition and its attributes to a model definition.
		    </xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="1" minOccurs="1" name="definition" type="tExtensionDefinition">
				<xsd:annotation>
					<xsd:documentation>
					    This flag defines if the semantics defined by the extension definition and its attribute definition MUST be understood by the model adopter in order to process the model correctly. Defaults to False.
				    </xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<!-- DS changed use=required to use=optional because of the presence of default=false
			Alternatively, restore use=required, but remove default -->
		<xsd:attribute default="false" use="optional" name="mustUnderstand" type="xsd:boolean">
			<xsd:annotation>
				<xsd:documentation>
				    Defines the content of the extension. Note that in the XML schema, this definition is provided by an external XML schema file and is simply referenced by QName.
			    </xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:element name="AdornmentAttributeDefinition" type="tAdornmentAttributeDefinition"/>
	<xsd:complexType name="tAdornmentAttributeDefinition">
		<xsd:annotation>
			<xsd:documentation>
			    A member of a AdornmentProfile that describes an attribute that is applicable to specific BaseElements.  The AdornmentAttributeDefinition has an AttributeType which in turn specifies the PrimativeAttributeType of the definition.
		    </xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tExtensionAttributeDefinition">
				<xsd:sequence>
					<xsd:element maxOccurs="1" minOccurs="0" name="attributeType" type="tAttributeType">
						<xsd:annotation>
							<xsd:documentation>The type of the AdornmentAttributeDefinition.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute use="required" name="chronicled" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>
						    When chronicled and updateable = &quot;True&quot; , a new AdornmentValue of the same AdornmentAttributeDefinition may be created for the element.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="required" name="profileAttributeName" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    The name of the AdornmentAttributeDefinition.  The name must be unique for any given adorned type in a AdornmentProfile. However, there may be multiple AdornmentDefinitions with the same name if they will be applied to different BaseElements.
					    </xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="required" name="removeable" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>
						    If the elements AdornmentValue conformant to this definition may be removed (deleted).
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="required" name="requiredAtCreation" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>
						    If &quot;True&quot;, the element must be provided an AdornedValue conformant to this definition at time of creation.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute use="required" name="updateable" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>
						    If &quot;True&quot;, the element&#39;s AdornmentValue conformant to this definition may be updated. In the case that the value is not chronicled, the AdornmentValue may be changed with new dateSet, and party. In the case that the value is chronicled, a new AttributeValue of the same ProfileAttributeDefinition is created for the element.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="AdornmentDefinition" type="tAdornmentDefinition"/>
	<xsd:complexType name="tAdornmentDefinition">
		<xsd:annotation>
			<xsd:documentation>
			    A reference to one or more types to which one or more AdornmentAttributeDefinitions apply as part of a AdornmentProfile.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<!-- DS Changed base="ExtensionDefinition" - an Element
				to base="tExtensionDefinition" - a Type, because types need to extend types -->
			<xsd:extension base="tExtensionDefinition">
				<xsd:sequence>
					<!-- DS Changed type="ExtensionAttributeDefinition" 
						to type="tExtensionAttributeDefinition"-->
					<xsd:element maxOccurs="unbounded" minOccurs="0" name="attributeDefinition" type="tExtensionAttributeDefinition">
						<xsd:annotation>
							<xsd:documentation>
							    The specification for an AdormentValue that may be added to an adornedType.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<!-- DS Changed type="BaseElement" 
						to type="tBaseElement"-->
					<xsd:element maxOccurs="1" minOccurs="1" name="adornedType" type="tBaseElement"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="AdornmentInstance">
		<xsd:annotation>
			<xsd:documentation>An element that has been adorned with one or more AdornmentValues through an AdornmentProfile.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<!-- DS Changed base="BaseElement" - an Element
				to base="tBaseElement" - a Type -->
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<!-- DS Changed type="ExtensionAttributeDefinition" 
						to type="tExtensionAttributeDefinition"-->
					<xsd:element maxOccurs="unbounded" minOccurs="0" name="value" type="tExtensionAttributeValue">
						<xsd:annotation>
							<xsd:documentation>A value that has been added to an adornedElement.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<!-- DS Changed type="BaseElement" 
						to type="tBaseElement"-->
					<xsd:element maxOccurs="1" minOccurs="0" name="adornedElement" type="tBaseElement"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="AdornmentProfile" type="tAdornmentProfile"/>
	<xsd:complexType name="tAdornmentProfile">
		<xsd:annotation>
			<xsd:documentation>
			    A profile of attribute definitions that may apply to one or more BaseElements under organizational, ad hoc, or de jure standards or conventions.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tExtensionDefinition">
				<xsd:sequence>
					<xsd:element maxOccurs="unbounded" minOccurs="0" name="adornableType" type="tAdornmentDefinition">
						<xsd:annotation>
							<xsd:documentation>
							    A set of AdornedElements that specify the BaseElements to which specific attribute types may be applied.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element maxOccurs="unbounded" minOccurs="0" name="attributeDefinition" type="tExtensionAttributeDefinition">
						<xsd:annotation>
							<xsd:documentation>
							    The specification for an AdornmentValue that may be added to an adornableType. AdornmentAttributeDefinitions referenced by this property of AdornmentProfile may be applied generally to any base element wherein the AdornmentProfile has been applied.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute use="required" name="version" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    The version of the AdornmentProfile.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="AdornmentValue" type="tAdornmentValue"/>
	<xsd:complexType abstract="true" name="tAdornmentValue">
		<xsd:annotation>
			<xsd:documentation>
			    A value of an attribute associated with an AdornedElement.  AdornmentValue is specialization of ExtensionAttributeValue where the type of the value is specified by the attributeDefinition property.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tExtensionAttributeValue">
				<xsd:sequence>
					<xsd:element maxOccurs="1" minOccurs="1" name="attributeDefinition" type="tAdornmentAttributeDefinition">
						<xsd:annotation>
							<xsd:documentation>
							    The specification for the AdormentValue that has been added to an adornedType.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute use="required" name="dateSet" type="xsd:dateTime">
					<xsd:annotation>
						<xsd:documentation>
						    The date/time that the value of the adornment was set.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="AttributeType" type="tAttributeType"/>
	<xsd:complexType name="tAttributeType">
		<xsd:annotation>
			<xsd:documentation>
			    The type of a AdornmentAttributeDefinition.  The type is specified by the PrimativeAttributeType enumeration.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tNamedElement">
				<xsd:sequence>
					<xsd:element maxOccurs="1" minOccurs="1" name="type" type="tPrimitiveAttributeType">
						<xsd:annotation>
							<xsd:documentation>
							    An enumeration that specifies the primitive type of the AdormentAttributeDefinition.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="DateTimeValue" type="tDateTimeValue"/>
	<xsd:complexType name="tDateTimeValue">
		<xsd:annotation>
			<xsd:documentation>
			    An AdornmentValue that is a DateTime type.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tAdornmentValue">
				<xsd:attribute use="required" name="attributeValue" type="xsd:dateTime">
					<xsd:annotation>
						<xsd:documentation>
						    The date/time representing the value of the adornment.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="IntegerValue" type="tIntegerValue"/>
	<xsd:complexType name="tIntegerValue">
		<xsd:annotation>
			<xsd:documentation>    
			    An AdornmentValue that is an Integer type.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tAdornmentValue">
				<xsd:attribute use="required" name="attributeValue" type="xsd:integer">
					<xsd:annotation>
						<xsd:documentation>
						    The integer representing the value of the adornment.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="StringValue" type="tStringValue"/>
	<xsd:complexType name="tStringValue">
		<xsd:annotation>
			<xsd:documentation>
			    An AdornmentValue that is a String type.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tAdornmentValue">
				<xsd:attribute use="required" name="attributeValue" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    The string representing the value of the adornment.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:simpleType name="tPrimitiveAttributeType">
		<xsd:annotation>
			<xsd:documentation>
			    The type of an attribute that may be added by a AdornmentAttributeDefinition to a BaseElement.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="dateTime"/>
			<xsd:enumeration value="integer"/>
			<xsd:enumeration value="string"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:element name="ExtensionAttributeDefinition" type="tExtensionAttributeDefinition"/>
	<xsd:complexType name="tExtensionAttributeDefinition">
		<xsd:annotation>
			<xsd:documentation>
			    The ExtensionAttributeDefinition defines new attributes. This type is not applicable when the XML schema interchange is used; since the XSD mechanisms for supporting “AnyAttribute” and “Any” type already satisfy this requirement. The ExtensionAttributeDefinition element inherits the attributes of NamedElement. It is contained within an ExtensionDefinition element.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tNamedElement">
				<xsd:attribute use="required" name="type" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>The type that is associated with the attribute.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<!-- DS changed use=required to use=optional because of the presence of default=false
					Alternatively, restore use=required, but remove default -->
				<xsd:attribute default="false" use="optional" name="isReference" type="xsd:boolean">
					<xsd:annotation>
						<xsd:documentation>Indicates if the attribute value will be referenced or contained.</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="ExtensionAttributeValue" type="tExtensionAttributeValue"/>
	<xsd:complexType name="tExtensionAttributeValue">
		<xsd:annotation>
			<xsd:documentation>
			    The ExtensionAttributeDefinition defines new attributes. This type is not applicable when the XML schema interchange is used; since the XSD mechanisms for supporting “AnyAttribute” and “Any” type already satisfy this requirement. The ExtensionAttributeDefinition element inherits the attributes of NamedElement. It is contained within an ExtensionDefinition element.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element maxOccurs="1" minOccurs="1" name="extensionAttributeDefinition" type="tExtensionAttributeDefinition">
				<xsd:annotation>
					<xsd:documentation>
					    Defines the extension attribute for which this value is being provided.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:element name="ExtensionDefinition" type="tExtensionDefinition"/>
	<xsd:complexType name="tExtensionDefinition">
		<xsd:annotation>
			<xsd:documentation>
			    The ExtensionDefinition class defines and groups additional attributes. This type is not applicable when the XML schema interchange is used, since XSD Complex Types already satisfy this requirement. The ExtensionDefinition element inherits the attributes of NamedElement. It is contained within an Extension element. The name is used as a namespace to uniquely identify the extension content.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tNamedElement">
				<xsd:sequence>
					<xsd:element maxOccurs="unbounded" minOccurs="0" name="extensionAttributeDefinition" type="tExtensionAttributeDefinition">
						<xsd:annotation>
							<xsd:documentation>
							    The specific attributes that make up the extension.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="Relationship" type="tRelationship"/>
	<xsd:complexType name="tRelationship">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<xsd:element maxOccurs="1" minOccurs="1" name="direction" type="tRelationshipDirection">
						<xsd:annotation>
							<xsd:documentation>
							    This attribute specifies the direction of the relationship.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute use="required" name="type" type="xsd:string">
					<xsd:annotation>
						<xsd:documentation>
						    The descriptive name of the element.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:simpleType name="tRelationshipDirection">
		<xsd:annotation>
			<xsd:documentation>
			    This enumeration list specifies the direction of the relationship.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="both"/>
			<xsd:enumeration value="backward"/>
			<xsd:enumeration value="none"/>
			<xsd:enumeration value="forward"/>
		</xsd:restriction>
	</xsd:simpleType>
</xsd:schema>